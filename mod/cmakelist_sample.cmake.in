list(APPEND CMAKE_MODULE_PATH @ToolchainDir@/script)

include(@ToolchainDir@/script/UseTS.cmake)
include(@ToolchainDir@/mod/buildToolchainMod.cmake)

cmake_minimum_required(VERSION 3.1)
project(@NAME@ CXX TS)

set(DEV d)
set(SDEV d)
set(LIBS d)
set(SLIBS d)
set(RES d)
set(SRES d)
set(GUI d)
set(SGUI d)
set(ADDIT " ")
set(SADDIT " ")

getPathsFile(@PATH@make.json ${SDEV} ${DEV} ${SLIBS} ${LIBS} ${SRES} ${RES} ${SGUI} ${GUI} ${ADDIT} ${SADDIT})

#set elf

#set bytecode


set(ASSETS "${RES}" "${GUI}" "${ADDIT}")
set(SASSETS "${SRES}" "${SGUI}" "${SADDIT}")

#set(LIBS lib)

message("sedim")
message(${SDEV})
message(${DEV})
message(${SLIBS})
message(${LIBS})
message(${SRES})
message(${RES})
message(${SGUI})
message(${GUI})
message("${ADDIT}")
message("${SADDIT}")

message("reddddnir")
message(@PATH@${SDEV}/tsconfig.json)

if(NOT EXISTS @PATH@${SDEV}/tsconfig.json)
    generate_tscfg(
        SOURCE_DIRS @PATH@${SDEV}
        FILE_PATH ${SDEV}/tsconfig.json
    )
endif()

if(NOT EXISTS @PATH@${outputdeclarations})
    create_ts_library_declarations(
        SOURCE_DIRS @PATH@${SDEV}
        OUTPUT_DIRS @PATH@${outputdeclarations}
    )
endif()

copyResources(
    @PATH@
    ${outputmod}
    "${SASSETS}"
    "${ASSETS}"
    FALSE
)

generateAndCopyBuildCfg(@PATH@ "${ASSETS}" "${LIBS}")

if(NOT EXISTS @PATH@${outputmod}/${SDEV})
    add_ts_tchainmod(
        @NAME@
        @PATH@
        "${SDEV}"
        "${DEV}"
    )
endif()