list(APPEND CMAKE_MODULE_PATH @ToolchainDir@/script)

include(@ToolchainDir@/script/UseTS.cmake)
include(@ToolchainDir@/mod/buildToolchainMod.cmake)

cmake_minimum_required(VERSION 3.1)
project(@NAME@ CXX TS)

set(IS_TO_TARGET TRUE)
set(BUILD_TYPE debug)
set(INNER_API CoreEngine)

getPathsFile(@PATH@ @PATH@make.json)

set(ASSETS "${RES}" "${GUI}" "${ADDIT}" "build.config")
set(SASSETS "${SRES}" "${SGUI}" "${SADDIT}" "src/build.config")

message("sedim")
message(${SDEV})
message(${DEV})
message(${SLIBS})
message(${LIBS})
message(${SPRELOADER})
message(${PRELOADER})
message(${SRES})
message(${RES})
message(${SGUI})
message(${GUI})
message("${ADDIT}")
message("${SADDIT}")

message("${COMPILEJAVA}")
message("${COMPILENATIVE}")

message(${DEVTARGET})

message("${TS}")
message("${STS}")

message("reddddnir")
message(@PATH@${SDEV}/tsconfig.json)

#[[if(NOT EXISTS @PATH@${SPRELOADER}/tsconfig.json)
    generateTSConfig(
        SOURCE_DIRS @PATH@${SPRELOADER}/
        FILE_PATH tsconfig.json
        INNER true
    )
endif()]]

if(NOT EXISTS @PATH@${SLIBS}/tsconfig.json)
    generateTSConfig(
        SOURCE_DIRS @PATH@${SLIBS}/
        FILE_PATH tsconfig.json
        INNER true
    )
endif()

if(NOT EXISTS @PATH@${SDEV}/tsconfig.json)
    set(od "\"../../output/declarations/lib/*.d.ts\"")
    generateTSConfig(
        SOURCE_DIRS @PATH@${SDEV}/
        FILE_PATH tsconfig.json
        INCLUDES ${od}
        INNER true
    )
endif()

set(outputdeclarationspreloader ${output}/declarations/${PRELOADER})
set(outputdeclarationslib ${output}/declarations/${LIBS})
set(outputdeclarationsdev ${output}/declarations/${DEV})

file(GLOB RECURSE slibz @PATH@${SPRELOADER}/"*.ts")
message(floo)
message(floo)
list(LENGTH slibz len)
    
if(${len} GREATER 0 AND NOT EXISTS @PATH@${outputdeclarationspreloader})
    createTSDeclarations(
        SOURCE_DIRS @PATH@${SPRELOADER}
        OUTPUT_DIRS @PATH@${outputdeclarationspreloader}
    )
endif()

file(GLOB RECURSE slibz @PATH@${SLIBS}/"*.ts") 
list(LENGTH slibz len)
if(${len} GREATER 0 AND NOT EXISTS @PATH@${outputdeclarationslib})
    createTSDeclarations(
        SOURCE_DIRS @PATH@${SLIBS}
        OUTPUT_DIRS @PATH@${outputdeclarationslib}
    )
endif()

if(NOT EXISTS @PATH@${outputdeclarationsdev})
    createTSDeclarations(
        SOURCE_DIRS @PATH@${SDEV}
        OUTPUT_DIRS @PATH@${outputdeclarationsdev}
    )
endif()

generateBuildConfig(@PATH@/src "${ASSETS}" "${LIBS}" ${BUILD_TYPE} ${INNER_API} FALSE)

copyResources(
    @PATH@
    ${outputmod}
    "${SASSETS}"
    "${ASSETS}"
    FALSE
)

#if(NOT EXISTS @PATH@${outputmod}/${DEV})
    add_tchainmod(
        @NAME@
        @PATH@
        "${STS}"
        "${TS}"
        ${DEVTARGET}
    )
#endif()