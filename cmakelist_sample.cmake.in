file (READ @PATH@make.json CONTENT)

string(JSON sources GET ${CONTENT} sources)

message(${sources})

string(JSON ln LENGTH ${sources})

message(${ln})

set(lna 1)
math(EXPR lna "${ln} - 1")

foreach(IDX RANGE ${lna})
    string(JSON source GET ${sources} ${IDX})
    string(JSON type GET ${source} type)
    string(JSON source GET ${source} source)
    #message(${source}g)
    if(${type} MATCHES main)
        message(${type})
        message(${source})
        
        set(dev ${source})
        
        #fatalIfNotExists(dev)
        find_path(
            dev
            #NAMES mypackage.h
	        PATHS @PATH@${dev}
	        PATH_SUFFIXES ${source}
	        REQUIRED
            NO_CACHE
        )
        break()
    endif()
endforeach()

if(NOT EXISTS @PATH@${dev}/tsconfig.json)
    create_cfg(
        SOURCE_DIRS @PATH@${dev}
        FILE_PATH ${dev}/tsconfig.json
    )
endif()

if(NOT EXISTS @PATH@${outputdeclarations})
    create_ts_library_declarations(
        SOURCE_DIRS @PATH@${dev}
        OUTPUT_DIR @PATH@${outputdeclarations}
    )
endif()

if(NOT EXISTS @PATH@${outputmod}/${dev})
    add_ts_mod(
        PRJ_DIR @PATH@
        DEV ${dev}
    )
endif()

set(res src/assets/res)

copyResources(
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/chren/
    "${res}"
    ${outputmod}
    FALSE
)

set(plit plit plitio)

generateBuildConfig(
    ${CMAKE_CURRENT_SOURCE_DIR}/third_party/chren/
    ${outputmod}
    "${plit}"
    wse
    FALSE
)

add_ts_library(
    @NAME@
    SOURCE_DIRS @PATH@${dev}
    OUTPUT_DIRS @PATH@${output}
)