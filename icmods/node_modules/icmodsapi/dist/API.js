import isInt from "./utils/isInt.js";
import request from "./utils/request.js";
var ICModsAPI;
(function (ICModsAPI) {
    ICModsAPI.url = "https://icmods.mineprogramming.org/";
    let Lang;
    (function (Lang) {
        Lang["RU"] = "ru";
        Lang["EN"] = "en";
    })(Lang = ICModsAPI.Lang || (ICModsAPI.Lang = {}));
    class Error extends globalThis.Error {
    }
    ICModsAPI.Error = Error;
    async function method(method, params = {}) {
        params = { lang: Lang.EN, ...params, horizon: true };
        let query = "";
        for (const name in params) {
            const value = ((value) => {
                if (Array.isArray(value)) {
                    return value.map(e => encodeURIComponent(e)).join(",");
                }
                else {
                    return value;
                }
            })(params[name]);
            query += `${encodeURIComponent(name)}=${encodeURIComponent(value)}&`;
        }
        const response = ((response) => {
            try {
                return JSON.parse(response);
            }
            catch (e) {
                return JSON.parse(response.replace(/\'/g, "\""));
            }
        })(await request(`${ICModsAPI.url}/api/${method}?${query}`));
        if (response.error)
            throw new Error(response.error);
        return response;
    }
    ICModsAPI.method = method;
    let Sort;
    (function (Sort) {
        Sort["POPULAR"] = "popular";
        Sort["NEW"] = "new";
        Sort["REDACTION"] = "redaction";
        Sort["UPDATED"] = "updated";
    })(Sort = ICModsAPI.Sort || (ICModsAPI.Sort = {}));
    function parseModShortInfo(mod) {
        mod.horizon_optimized = !!mod.horizon_optimized;
        mod.vip = !!mod.vip;
        mod.pack = !!mod.pack;
        mod.multiplayer = !!mod.multiplayer;
        return mod;
    }
    function parseModsShortInfo(mods) {
        return Object.values(mods).map(e => parseModShortInfo(e));
    }
    async function list(sort = Sort.POPULAR, offset = 0, limit = 20, lang = null) {
        if (!isInt(offset))
            throw new TypeError("offset was been Int");
        if (!isInt(limit))
            throw new TypeError("limit was been Int");
        return parseModsShortInfo(await method("list", {
            sort: sort,
            start: offset,
            count: limit,
            lang: lang
        }));
    }
    ICModsAPI.list = list;
    ;
    async function listForIDs(ids, lang = null) {
        if (ids.findIndex(i => !isInt(i)) != -1)
            throw new TypeError("ids was been Array<Int>");
        return parseModsShortInfo(await method("list", {
            ids: ids,
            lang: lang
        }));
    }
    ICModsAPI.listForIDs = listForIDs;
    async function description(id, lang = Lang.EN) {
        if (!isInt(id))
            throw new TypeError("id was been Int");
        const [mod, [advanceInfo]] = await Promise.all([method("description", {
                id: id,
                lang: lang
            }), listForIDs([id])]);
        mod.vip = !!mod.vip;
        mod.pack = !!mod.pack;
        mod.multiplayer = !!mod.multiplayer;
        mod.enabled = !!mod.enabled;
        mod.hidden = !mod.enabled;
        mod.description = mod.description_full;
        mod.icon = mod.icon_full;
        mod.description_short = advanceInfo.description;
        mod.icon_small = advanceInfo.icon;
        return mod;
    }
    ICModsAPI.description = description;
    //alias
    function getModInfo(id, lang = Lang.EN) {
        return description(id, lang);
    }
    ICModsAPI.getModInfo = getModInfo;
    ;
    async function searchModsFromAuthor(id, lang = null) {
        if (!isInt(id))
            throw new TypeError("id was been Int");
        return parseModsShortInfo(await method("search", { author: id, lang: lang }));
    }
    ICModsAPI.searchModsFromAuthor = searchModsFromAuthor;
    async function searchModsAtTag(tag, lang = null) {
        return parseModsShortInfo(await method("search", { tag: tag, lang: lang }));
    }
    ICModsAPI.searchModsAtTag = searchModsAtTag;
    async function searchMods(query, lang = null) {
        return parseModsShortInfo(await method("search", { q: query, lang: lang }));
    }
    ICModsAPI.searchMods = searchMods;
    function getImageURL(file) {
        return `${ICModsAPI.url}/api/img/${file}`;
    }
    ICModsAPI.getImageURL = getImageURL;
    async function getImage(file) {
        try {
            return await request(getImageURL(file), "binary");
        }
        catch (e) {
            if (e.statusCode == 404)
                throw new RangeError(`Not found file ${file}.`);
            throw new Error(e);
        }
    }
    ICModsAPI.getImage = getImage;
})(ICModsAPI || (ICModsAPI = {}));
export default ICModsAPI;
