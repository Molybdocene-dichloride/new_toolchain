/// <reference types="node" />
declare namespace ICModsAPI {
    export const url: string;
    export enum Lang {
        RU = "ru",
        EN = "en"
    }
    export interface IMethodParams {
        lang?: Lang;
        [key: string]: string | number | boolean | Array<string | number>;
    }
    export class Error extends globalThis.Error {
    }
    export function method<T>(method: string, params?: IMethodParams): Promise<T>;
    interface Mod {
        id: number;
        title: string;
        version: number;
        version_name: string;
        last_update: string;
        icon: string;
        likes: number;
        description: string;
    }
    export interface ModShortInfo extends Mod {
        horizon_optimized: boolean;
        vip: boolean;
        pack: boolean;
        multiplayer: boolean;
    }
    export enum Sort {
        POPULAR = "popular",
        NEW = "new",
        REDACTION = "redaction",
        UPDATED = "updated"
    }
    export function list(sort?: Sort, offset?: number, limit?: number, lang?: Lang): Promise<ModShortInfo[]>;
    export function listForIDs(ids: number[], lang?: Lang): Promise<ModShortInfo[]>;
    export interface ModLink {
        link: string;
        name: string;
    }
    export interface ModComment {
        comment: string;
        user: string;
    }
    export interface ModInfo extends ModShortInfo {
        filename: string;
        icon_full: string;
        icon_small: string;
        screenshots: NodeJS.Dict<string>;
        github?: string;
        rate: number;
        author: number;
        downloads: number;
        changelog?: string;
        deprecated: number;
        description_full: string;
        description_short: string;
        tags: string[];
        links: ModLink[];
        author_name: string;
        dependencies: number[];
        addons: number[];
        comments: ModComment[];
        enabled: boolean;
        hidden: boolean;
    }
    export function description(id: number, lang?: Lang): Promise<ModInfo>;
    export function getModInfo(id: number, lang?: Lang): Promise<ModInfo>;
    export function searchModsFromAuthor(id: number, lang?: Lang): Promise<ModShortInfo[]>;
    export function searchModsAtTag(tag: string, lang?: Lang): Promise<ModShortInfo[]>;
    export function searchMods(query: string, lang?: Lang): Promise<ModShortInfo[]>;
    export function getImageURL(file: string): string;
    export function getImage(file: string): Promise<string>;
    export {};
}
export default ICModsAPI;
